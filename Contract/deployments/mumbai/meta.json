{
  "address": "0xcAEe7920E29A0AD4961F0Be776B8dd92B286655c",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "contract_Owner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "_baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalanceOfSender",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "getBalanceOfTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTokenIDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metaOrcs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbc5d04199705e898f8d1deb99c0229811770b29248301e5dfab1f392ff357013",
  "receipt": {
    "to": null,
    "from": "0x33B2d83864c1dc568a3f6Cd03A48Eb07193054f2",
    "contractAddress": "0xcAEe7920E29A0AD4961F0Be776B8dd92B286655c",
    "transactionIndex": 2,
    "gasUsed": "2783482",
    "logsBloom": "0x
    "blockHash": "0x1aafcf6faee1f3dda13a859041c71b6237407aff618b8b95c15f8c346155981c",
    "transactionHash": "0xbc5d04199705e898f8d1deb99c0229811770b29248301e5dfab1f392ff357013",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 27175682,
        "transactionHash": "0xbc5d04199705e898f8d1deb99c0229811770b29248301e5dfab1f392ff357013",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000033b2d83864c1dc568a3f6cd03a48eb07193054f2",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000898d7800b92410000000000000000000000000000000000000000000000000077632a85565ad33000000000000000000000000000000000000000000001168c37da8873b2eff6500000000000000000000000000000000000000000000000006eca53054ac8923000000000000000000000000000000000000000000001168c40735ff3be82375",
        "logIndex": 6,
        "blockHash": "0x1aafcf6faee1f3dda13a859041c71b6237407aff618b8b95c15f8c346155981c"
      }
    ],
    "blockNumber": 27175682,
    "cumulativeGasUsed": "3244272",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "b9d207f024cccb99cfe31051508cbf4a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"contract_Owner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalanceOfSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getBalanceOfTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenIDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaOrcs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Meta.sol\":\"meta\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Meta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0; \\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\n\\nerror noMoreTokenIds(); \\nerror insufficientFunds();\\nerror contract_Owner();\\n\\ncontract meta is ERC1155 { \\n    //1 assigned ID for this contract\\n    uint256 public constant metaOrcs = 0;\\n    uint256 private immutable i_maxTokenIds = 10000;\\n    uint private immutable i_price = 0.01 ether;\\n    address private immutable i_owner;\\n    //keep track of tokenIds using a counter \\n    uint256 public tokenIds = 0;\\n    \\n    string private constant baseURI = \\\"ipfs://QmYGB11R42eg49Mgts9THPmYqu4qCSarhZKjDirAnYnMS8/metadata.json\\\";\\n\\n\\n\\n     modifier  onlyOwner { \\n         //For only ownes of contract can withdraw funds\\n        if(i_owner != msg.sender) { \\n            revert contract_Owner();\\n        }\\n        _;\\n    }\\n    \\n\\n    constructor() ERC1155(baseURI) {\\n       i_owner = msg.sender;\\n    }\\n\\n    function mint() payable public {\\n        require(balanceOf(msg.sender, 0) <= 1, \\\"You can't mint no more\\\");\\n        require(tokenIds <= i_maxTokenIds, \\\"There are none available for mint\\\");\\n        require(msg.value >= i_price, \\\"Send more money man\\\");\\n\\n        _mint(msg.sender, 0, 1, \\\"\\\"); \\n        tokenIds ++;\\n\\n    }\\n    //withdraw funds \\n    function withdraw() onlyOwner public { \\n        address owner = i_owner; \\n        uint256 amount = address(this).balance; \\n        (bool sent,) = owner.call{value: amount}(\\\"\\\");\\n        require(sent, \\\"Failed to send ether\\\");\\n    }\\n\\n    function getBalanceOfSender() public view returns(uint256) { \\n        return msg.sender.balance;\\n    }\\n\\n    //get balance of TOKEN\\n    function getBalanceOfTokens(address _sender) public view returns(uint256) { \\n\\n        return balanceOf(_sender, 0);\\n    }\\n    //get balance of contract \\n    function getBalance() public view returns (uint256) { \\n        return address(this).balance;\\n    }\\n\\n    function getTokenID() public view returns (uint256) { \\n        return tokenIds;\\n    }\\n\\n    function _baseURI() public pure  returns (string memory) { \\n        return baseURI;\\n    }\\n\\n    function maxTokenIDS() public pure returns(uint256) { \\n        return i_maxTokenIds;\\n    }\\n\\n\\n\\n    \\n\\n\\n    \\n\\n\\n\\n    receive() external payable{}\\n    fallback() external payable{}\\n}\\n\\n\\n\",\"keccak256\":\"0x2411b464b82fc643ed6556e33ad67f5ee7c7d3eef2f6cb8e1768639a7462a9ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052612710608090815250662386f26fc1000060a09081525060006003553480156200002d57600080fd5b50604051806080016040528060438152602001620031e76043913962000059816200009760201b60201c565b503373ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b81525050620001c8565b8060029080519060200190620000af929190620000b3565b5050565b828054620000c19062000192565b90600052602060002090601f016020900481019282620000e5576000855562000131565b82601f106200010057805160ff191683800117855562000131565b8280016001018555821562000131579182015b828111156200013057825182559160200191906001019062000113565b5b50905062000140919062000144565b5090565b5b808211156200015f57600081600090555060010162000145565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001ab57607f821691505b60208210811415620001c257620001c162000163565b5b50919050565b60805160a05160c05160601c612fde620002096000396000818161089f015261090f015260006107480152600081816106e30152610b680152612fde6000f3fe60806040526004361061010c5760003560e01c80636ba367a311610095578063be6d91e611610064578063be6d91e614610353578063cc65c31c1461037e578063e985e9c5146103a9578063f242432a146103e6578063fb627a9a1461040f57610113565b80636ba367a3146102a9578063714cff56146102d4578063743976a0146102ff578063a22cb4651461032a57610113565b80631249c58b116100dc5780631249c58b146101f75780632eb2c2d614610201578063321e0f7f1461022a5780633ccfd60b146102555780634e1273f41461026c57610113565b8062fdd58e1461011557806301ffc9a7146101525780630e89341c1461018f57806312065fe0146101cc57610113565b3661011357005b005b34801561012157600080fd5b5061013c60048036038101906101379190611b46565b61044c565b6040516101499190611b95565b60405180910390f35b34801561015e57600080fd5b5061017960048036038101906101749190611c08565b610515565b6040516101869190611c50565b60405180910390f35b34801561019b57600080fd5b506101b660048036038101906101b19190611c6b565b6105f7565b6040516101c39190611d31565b60405180910390f35b3480156101d857600080fd5b506101e161068b565b6040516101ee9190611b95565b60405180910390f35b6101ff610693565b005b34801561020d57600080fd5b5061022860048036038101906102239190611f50565b6107e0565b005b34801561023657600080fd5b5061023f610881565b60405161024c9190611b95565b60405180910390f35b34801561026157600080fd5b5061026a610886565b005b34801561027857600080fd5b50610293600480360381019061028e91906120e2565b6109e6565b6040516102a09190612218565b60405180910390f35b3480156102b557600080fd5b506102be610aff565b6040516102cb9190611b95565b60405180910390f35b3480156102e057600080fd5b506102e9610b09565b6040516102f69190611b95565b60405180910390f35b34801561030b57600080fd5b50610314610b0f565b6040516103219190611d31565b60405180910390f35b34801561033657600080fd5b50610351600480360381019061034c9190612266565b610b2f565b005b34801561035f57600080fd5b50610368610b45565b6040516103759190611b95565b60405180910390f35b34801561038a57600080fd5b50610393610b64565b6040516103a09190611b95565b60405180910390f35b3480156103b557600080fd5b506103d060048036038101906103cb91906122a6565b610b8c565b6040516103dd9190611c50565b60405180910390f35b3480156103f257600080fd5b5061040d600480360381019061040891906122e6565b610c20565b005b34801561041b57600080fd5b506104366004803603810190610431919061237d565b610cc1565b6040516104439190611b95565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b49061241c565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105e057507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105f057506105ef82610cd5565b5b9050919050565b6060600280546106069061246b565b80601f01602080910402602001604051908101604052809291908181526020018280546106329061246b565b801561067f5780601f106106545761010080835404028352916020019161067f565b820191906000526020600020905b81548152906001019060200180831161066257829003601f168201915b50505050509050919050565b600047905090565b60016106a033600061044c565b11156106e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d8906124e9565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006003541115610746576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073d9061257b565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000003410156107a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a0906125e7565b60405180910390fd5b6107c6336000600160405180602001604052806000815250610d3f565b600360008154809291906107d990612636565b9190505550565b6107e8610ef0565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061082e575061082d85610828610ef0565b610b8c565b5b61086d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610864906126f1565b60405180910390fd5b61087a8585858585610ef8565b5050505050565b600081565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff161461090b576040517fa0fa0dab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000009050600047905060008273ffffffffffffffffffffffffffffffffffffffff168260405161095b90612742565b60006040518083038185875af1925050503d8060008114610998576040519150601f19603f3d011682016040523d82523d6000602084013e61099d565b606091505b50509050806109e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d8906127a3565b60405180910390fd5b505050565b60608151835114610a2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2390612835565b60405180910390fd5b6000835167ffffffffffffffff811115610a4957610a48611d58565b5b604051908082528060200260200182016040528015610a775781602001602082028036833780820191505090505b50905060005b8451811015610af457610ac4858281518110610a9c57610a9b612855565b5b6020026020010151858381518110610ab757610ab6612855565b5b602002602001015161044c565b828281518110610ad757610ad6612855565b5b60200260200101818152505080610aed90612636565b9050610a7d565b508091505092915050565b6000600354905090565b60035481565b6060604051806080016040528060438152602001612f6660439139905090565b610b41610b3a610ef0565b838361121a565b5050565b60003373ffffffffffffffffffffffffffffffffffffffff1631905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610c28610ef0565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610c6e5750610c6d85610c68610ef0565b610b8c565b5b610cad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca4906126f1565b60405180910390fd5b610cba8585858585611387565b5050505050565b6000610cce82600061044c565b9050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610daf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da6906128f6565b60405180910390fd5b6000610db9610ef0565b90506000610dc685611623565b90506000610dd385611623565b9050610de48360008985858961169d565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e439190612916565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051610ec192919061296c565b60405180910390a4610ed8836000898585896116a5565b610ee7836000898989896116ad565b50505050505050565b600033905090565b8151835114610f3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3390612a07565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610fac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa390612a99565b60405180910390fd5b6000610fb6610ef0565b9050610fc681878787878761169d565b60005b8451811015611177576000858281518110610fe757610fe6612855565b5b60200260200101519050600085838151811061100657611005612855565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156110a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109e90612b2b565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461115c9190612916565b925050819055505050508061117090612636565b9050610fc9565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516111ee929190612b4b565b60405180910390a46112048187878787876116a5565b611212818787878787611894565b505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611289576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128090612bf4565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161137a9190611c50565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156113f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ee90612a99565b60405180910390fd5b6000611401610ef0565b9050600061140e85611623565b9050600061141b85611623565b905061142b83898985858961169d565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050858110156114c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b990612b2b565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115779190612916565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a6040516115f492919061296c565b60405180910390a461160a848a8a86868a6116a5565b611618848a8a8a8a8a6116ad565b505050505050505050565b60606000600167ffffffffffffffff81111561164257611641611d58565b5b6040519080825280602002602001820160405280156116705781602001602082028036833780820191505090505b509050828160008151811061168857611687612855565b5b60200260200101818152505080915050919050565b505050505050565b505050505050565b6116cc8473ffffffffffffffffffffffffffffffffffffffff16611a7b565b1561188c578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401611712959493929190612c78565b602060405180830381600087803b15801561172c57600080fd5b505af192505050801561175d57506040513d601f19601f8201168201806040525081019061175a9190612ce7565b60015b61180357611769612d21565b806308c379a014156117c6575061177e612d43565b8061178957506117c8565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117bd9190611d31565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fa90612e4b565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461188a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188190612edd565b60405180910390fd5b505b505050505050565b6118b38473ffffffffffffffffffffffffffffffffffffffff16611a7b565b15611a73578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016118f9959493929190612efd565b602060405180830381600087803b15801561191357600080fd5b505af192505050801561194457506040513d601f19601f820116820180604052508101906119419190612ce7565b60015b6119ea57611950612d21565b806308c379a014156119ad5750611965612d43565b8061197057506119af565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a49190611d31565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e190612e4b565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611a71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6890612edd565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611add82611ab2565b9050919050565b611aed81611ad2565b8114611af857600080fd5b50565b600081359050611b0a81611ae4565b92915050565b6000819050919050565b611b2381611b10565b8114611b2e57600080fd5b50565b600081359050611b4081611b1a565b92915050565b60008060408385031215611b5d57611b5c611aa8565b5b6000611b6b85828601611afb565b9250506020611b7c85828601611b31565b9150509250929050565b611b8f81611b10565b82525050565b6000602082019050611baa6000830184611b86565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611be581611bb0565b8114611bf057600080fd5b50565b600081359050611c0281611bdc565b92915050565b600060208284031215611c1e57611c1d611aa8565b5b6000611c2c84828501611bf3565b91505092915050565b60008115159050919050565b611c4a81611c35565b82525050565b6000602082019050611c656000830184611c41565b92915050565b600060208284031215611c8157611c80611aa8565b5b6000611c8f84828501611b31565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611cd2578082015181840152602081019050611cb7565b83811115611ce1576000848401525b50505050565b6000601f19601f8301169050919050565b6000611d0382611c98565b611d0d8185611ca3565b9350611d1d818560208601611cb4565b611d2681611ce7565b840191505092915050565b60006020820190508181036000830152611d4b8184611cf8565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d9082611ce7565b810181811067ffffffffffffffff82111715611daf57611dae611d58565b5b80604052505050565b6000611dc2611a9e565b9050611dce8282611d87565b919050565b600067ffffffffffffffff821115611dee57611ded611d58565b5b602082029050602081019050919050565b600080fd5b6000611e17611e1284611dd3565b611db8565b90508083825260208201905060208402830185811115611e3a57611e39611dff565b5b835b81811015611e635780611e4f8882611b31565b845260208401935050602081019050611e3c565b5050509392505050565b600082601f830112611e8257611e81611d53565b5b8135611e92848260208601611e04565b91505092915050565b600080fd5b600067ffffffffffffffff821115611ebb57611eba611d58565b5b611ec482611ce7565b9050602081019050919050565b82818337600083830152505050565b6000611ef3611eee84611ea0565b611db8565b905082815260208101848484011115611f0f57611f0e611e9b565b5b611f1a848285611ed1565b509392505050565b600082601f830112611f3757611f36611d53565b5b8135611f47848260208601611ee0565b91505092915050565b600080600080600060a08688031215611f6c57611f6b611aa8565b5b6000611f7a88828901611afb565b9550506020611f8b88828901611afb565b945050604086013567ffffffffffffffff811115611fac57611fab611aad565b5b611fb888828901611e6d565b935050606086013567ffffffffffffffff811115611fd957611fd8611aad565b5b611fe588828901611e6d565b925050608086013567ffffffffffffffff81111561200657612005611aad565b5b61201288828901611f22565b9150509295509295909350565b600067ffffffffffffffff82111561203a57612039611d58565b5b602082029050602081019050919050565b600061205e6120598461201f565b611db8565b9050808382526020820190506020840283018581111561208157612080611dff565b5b835b818110156120aa57806120968882611afb565b845260208401935050602081019050612083565b5050509392505050565b600082601f8301126120c9576120c8611d53565b5b81356120d984826020860161204b565b91505092915050565b600080604083850312156120f9576120f8611aa8565b5b600083013567ffffffffffffffff81111561211757612116611aad565b5b612123858286016120b4565b925050602083013567ffffffffffffffff81111561214457612143611aad565b5b61215085828601611e6d565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61218f81611b10565b82525050565b60006121a18383612186565b60208301905092915050565b6000602082019050919050565b60006121c58261215a565b6121cf8185612165565b93506121da83612176565b8060005b8381101561220b5781516121f28882612195565b97506121fd836121ad565b9250506001810190506121de565b5085935050505092915050565b6000602082019050818103600083015261223281846121ba565b905092915050565b61224381611c35565b811461224e57600080fd5b50565b6000813590506122608161223a565b92915050565b6000806040838503121561227d5761227c611aa8565b5b600061228b85828601611afb565b925050602061229c85828601612251565b9150509250929050565b600080604083850312156122bd576122bc611aa8565b5b60006122cb85828601611afb565b92505060206122dc85828601611afb565b9150509250929050565b600080600080600060a0868803121561230257612301611aa8565b5b600061231088828901611afb565b955050602061232188828901611afb565b945050604061233288828901611b31565b935050606061234388828901611b31565b925050608086013567ffffffffffffffff81111561236457612363611aad565b5b61237088828901611f22565b9150509295509295909350565b60006020828403121561239357612392611aa8565b5b60006123a184828501611afb565b91505092915050565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b6000612406602a83611ca3565b9150612411826123aa565b604082019050919050565b60006020820190508181036000830152612435816123f9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061248357607f821691505b602082108114156124975761249661243c565b5b50919050565b7f596f752063616e2774206d696e74206e6f206d6f726500000000000000000000600082015250565b60006124d3601683611ca3565b91506124de8261249d565b602082019050919050565b60006020820190508181036000830152612502816124c6565b9050919050565b7f546865726520617265206e6f6e6520617661696c61626c6520666f72206d696e60008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b6000612565602183611ca3565b915061257082612509565b604082019050919050565b6000602082019050818103600083015261259481612558565b9050919050565b7f53656e64206d6f7265206d6f6e6579206d616e00000000000000000000000000600082015250565b60006125d1601383611ca3565b91506125dc8261259b565b602082019050919050565b60006020820190508181036000830152612600816125c4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061264182611b10565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561267457612673612607565b5b600182019050919050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206e6f7220617070726f7665640000000000000000000000000000000000602082015250565b60006126db602f83611ca3565b91506126e68261267f565b604082019050919050565b6000602082019050818103600083015261270a816126ce565b9050919050565b600081905092915050565b50565b600061272c600083612711565b91506127378261271c565b600082019050919050565b600061274d8261271f565b9150819050919050565b7f4661696c656420746f2073656e64206574686572000000000000000000000000600082015250565b600061278d601483611ca3565b915061279882612757565b602082019050919050565b600060208201905081810360008301526127bc81612780565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b600061281f602983611ca3565b915061282a826127c3565b604082019050919050565b6000602082019050818103600083015261284e81612812565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006128e0602183611ca3565b91506128eb82612884565b604082019050919050565b6000602082019050818103600083015261290f816128d3565b9050919050565b600061292182611b10565b915061292c83611b10565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561296157612960612607565b5b828201905092915050565b60006040820190506129816000830185611b86565b61298e6020830184611b86565b9392505050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b60006129f1602883611ca3565b91506129fc82612995565b604082019050919050565b60006020820190508181036000830152612a20816129e4565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612a83602583611ca3565b9150612a8e82612a27565b604082019050919050565b60006020820190508181036000830152612ab281612a76565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000612b15602a83611ca3565b9150612b2082612ab9565b604082019050919050565b60006020820190508181036000830152612b4481612b08565b9050919050565b60006040820190508181036000830152612b6581856121ba565b90508181036020830152612b7981846121ba565b90509392505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000612bde602983611ca3565b9150612be982612b82565b604082019050919050565b60006020820190508181036000830152612c0d81612bd1565b9050919050565b612c1d81611ad2565b82525050565b600081519050919050565b600082825260208201905092915050565b6000612c4a82612c23565b612c548185612c2e565b9350612c64818560208601611cb4565b612c6d81611ce7565b840191505092915050565b600060a082019050612c8d6000830188612c14565b612c9a6020830187612c14565b612ca76040830186611b86565b612cb46060830185611b86565b8181036080830152612cc68184612c3f565b90509695505050505050565b600081519050612ce181611bdc565b92915050565b600060208284031215612cfd57612cfc611aa8565b5b6000612d0b84828501612cd2565b91505092915050565b60008160e01c9050919050565b600060033d1115612d405760046000803e612d3d600051612d14565b90505b90565b600060443d1015612d5357612dd6565b612d5b611a9e565b60043d036004823e80513d602482011167ffffffffffffffff82111715612d83575050612dd6565b808201805167ffffffffffffffff811115612da15750505050612dd6565b80602083010160043d038501811115612dbe575050505050612dd6565b612dcd82602001850186611d87565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000612e35603483611ca3565b9150612e4082612dd9565b604082019050919050565b60006020820190508181036000830152612e6481612e28565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000612ec7602883611ca3565b9150612ed282612e6b565b604082019050919050565b60006020820190508181036000830152612ef681612eba565b9050919050565b600060a082019050612f126000830188612c14565b612f1f6020830187612c14565b8181036040830152612f3181866121ba565b90508181036060830152612f4581856121ba565b90508181036080830152612f598184612c3f565b9050969550505050505056fe697066733a2f2f516d5947423131523432656734394d677473395448506d597175347143536172685a4b6a446972416e596e4d53382f6d657461646174612e6a736f6ea2646970667358221220ee4ae137e1f35a7e47fb218b5cf2e0aa5e62a76b9e345ec4e2fdb2c2d6e801b564736f6c63430008080033697066733a2f2f516d5947423131523432656734394d677473395448506d597175347143536172685a4b6a446972416e596e4d53382f6d657461646174612e6a736f6e",
  "deployedBytecode": "0x60806040526004361061010c5760003560e01c80636ba367a311610095578063be6d91e611610064578063be6d91e614610353578063cc65c31c1461037e578063e985e9c5146103a9578063f242432a146103e6578063fb627a9a1461040f57610113565b80636ba367a3146102a9578063714cff56146102d4578063743976a0146102ff578063a22cb4651461032a57610113565b80631249c58b116100dc5780631249c58b146101f75780632eb2c2d614610201578063321e0f7f1461022a5780633ccfd60b146102555780634e1273f41461026c57610113565b8062fdd58e1461011557806301ffc9a7146101525780630e89341c1461018f57806312065fe0146101cc57610113565b3661011357005b005b34801561012157600080fd5b5061013c60048036038101906101379190611b46565b61044c565b6040516101499190611b95565b60405180910390f35b34801561015e57600080fd5b5061017960048036038101906101749190611c08565b610515565b6040516101869190611c50565b60405180910390f35b34801561019b57600080fd5b506101b660048036038101906101b19190611c6b565b6105f7565b6040516101c39190611d31565b60405180910390f35b3480156101d857600080fd5b506101e161068b565b6040516101ee9190611b95565b60405180910390f35b6101ff610693565b005b34801561020d57600080fd5b5061022860048036038101906102239190611f50565b6107e0565b005b34801561023657600080fd5b5061023f610881565b60405161024c9190611b95565b60405180910390f35b34801561026157600080fd5b5061026a610886565b005b34801561027857600080fd5b50610293600480360381019061028e91906120e2565b6109e6565b6040516102a09190612218565b60405180910390f35b3480156102b557600080fd5b506102be610aff565b6040516102cb9190611b95565b60405180910390f35b3480156102e057600080fd5b506102e9610b09565b6040516102f69190611b95565b60405180910390f35b34801561030b57600080fd5b50610314610b0f565b6040516103219190611d31565b60405180910390f35b34801561033657600080fd5b50610351600480360381019061034c9190612266565b610b2f565b005b34801561035f57600080fd5b50610368610b45565b6040516103759190611b95565b60405180910390f35b34801561038a57600080fd5b50610393610b64565b6040516103a09190611b95565b60405180910390f35b3480156103b557600080fd5b506103d060048036038101906103cb91906122a6565b610b8c565b6040516103dd9190611c50565b60405180910390f35b3480156103f257600080fd5b5061040d600480360381019061040891906122e6565b610c20565b005b34801561041b57600080fd5b506104366004803603810190610431919061237d565b610cc1565b6040516104439190611b95565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b49061241c565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105e057507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105f057506105ef82610cd5565b5b9050919050565b6060600280546106069061246b565b80601f01602080910402602001604051908101604052809291908181526020018280546106329061246b565b801561067f5780601f106106545761010080835404028352916020019161067f565b820191906000526020600020905b81548152906001019060200180831161066257829003601f168201915b50505050509050919050565b600047905090565b60016106a033600061044c565b11156106e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d8906124e9565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006003541115610746576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073d9061257b565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000003410156107a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a0906125e7565b60405180910390fd5b6107c6336000600160405180602001604052806000815250610d3f565b600360008154809291906107d990612636565b9190505550565b6107e8610ef0565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061082e575061082d85610828610ef0565b610b8c565b5b61086d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610864906126f1565b60405180910390fd5b61087a8585858585610ef8565b5050505050565b600081565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff161461090b576040517fa0fa0dab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000009050600047905060008273ffffffffffffffffffffffffffffffffffffffff168260405161095b90612742565b60006040518083038185875af1925050503d8060008114610998576040519150601f19603f3d011682016040523d82523d6000602084013e61099d565b606091505b50509050806109e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d8906127a3565b60405180910390fd5b505050565b60608151835114610a2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2390612835565b60405180910390fd5b6000835167ffffffffffffffff811115610a4957610a48611d58565b5b604051908082528060200260200182016040528015610a775781602001602082028036833780820191505090505b50905060005b8451811015610af457610ac4858281518110610a9c57610a9b612855565b5b6020026020010151858381518110610ab757610ab6612855565b5b602002602001015161044c565b828281518110610ad757610ad6612855565b5b60200260200101818152505080610aed90612636565b9050610a7d565b508091505092915050565b6000600354905090565b60035481565b6060604051806080016040528060438152602001612f6660439139905090565b610b41610b3a610ef0565b838361121a565b5050565b60003373ffffffffffffffffffffffffffffffffffffffff1631905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610c28610ef0565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610c6e5750610c6d85610c68610ef0565b610b8c565b5b610cad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca4906126f1565b60405180910390fd5b610cba8585858585611387565b5050505050565b6000610cce82600061044c565b9050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610daf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da6906128f6565b60405180910390fd5b6000610db9610ef0565b90506000610dc685611623565b90506000610dd385611623565b9050610de48360008985858961169d565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e439190612916565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051610ec192919061296c565b60405180910390a4610ed8836000898585896116a5565b610ee7836000898989896116ad565b50505050505050565b600033905090565b8151835114610f3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3390612a07565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610fac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa390612a99565b60405180910390fd5b6000610fb6610ef0565b9050610fc681878787878761169d565b60005b8451811015611177576000858281518110610fe757610fe6612855565b5b60200260200101519050600085838151811061100657611005612855565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156110a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109e90612b2b565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461115c9190612916565b925050819055505050508061117090612636565b9050610fc9565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516111ee929190612b4b565b60405180910390a46112048187878787876116a5565b611212818787878787611894565b505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611289576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128090612bf4565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161137a9190611c50565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156113f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ee90612a99565b60405180910390fd5b6000611401610ef0565b9050600061140e85611623565b9050600061141b85611623565b905061142b83898985858961169d565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050858110156114c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b990612b2b565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115779190612916565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a6040516115f492919061296c565b60405180910390a461160a848a8a86868a6116a5565b611618848a8a8a8a8a6116ad565b505050505050505050565b60606000600167ffffffffffffffff81111561164257611641611d58565b5b6040519080825280602002602001820160405280156116705781602001602082028036833780820191505090505b509050828160008151811061168857611687612855565b5b60200260200101818152505080915050919050565b505050505050565b505050505050565b6116cc8473ffffffffffffffffffffffffffffffffffffffff16611a7b565b1561188c578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401611712959493929190612c78565b602060405180830381600087803b15801561172c57600080fd5b505af192505050801561175d57506040513d601f19601f8201168201806040525081019061175a9190612ce7565b60015b61180357611769612d21565b806308c379a014156117c6575061177e612d43565b8061178957506117c8565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117bd9190611d31565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fa90612e4b565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461188a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188190612edd565b60405180910390fd5b505b505050505050565b6118b38473ffffffffffffffffffffffffffffffffffffffff16611a7b565b15611a73578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016118f9959493929190612efd565b602060405180830381600087803b15801561191357600080fd5b505af192505050801561194457506040513d601f19601f820116820180604052508101906119419190612ce7565b60015b6119ea57611950612d21565b806308c379a014156119ad5750611965612d43565b8061197057506119af565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a49190611d31565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e190612e4b565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611a71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6890612edd565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611add82611ab2565b9050919050565b611aed81611ad2565b8114611af857600080fd5b50565b600081359050611b0a81611ae4565b92915050565b6000819050919050565b611b2381611b10565b8114611b2e57600080fd5b50565b600081359050611b4081611b1a565b92915050565b60008060408385031215611b5d57611b5c611aa8565b5b6000611b6b85828601611afb565b9250506020611b7c85828601611b31565b9150509250929050565b611b8f81611b10565b82525050565b6000602082019050611baa6000830184611b86565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611be581611bb0565b8114611bf057600080fd5b50565b600081359050611c0281611bdc565b92915050565b600060208284031215611c1e57611c1d611aa8565b5b6000611c2c84828501611bf3565b91505092915050565b60008115159050919050565b611c4a81611c35565b82525050565b6000602082019050611c656000830184611c41565b92915050565b600060208284031215611c8157611c80611aa8565b5b6000611c8f84828501611b31565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611cd2578082015181840152602081019050611cb7565b83811115611ce1576000848401525b50505050565b6000601f19601f8301169050919050565b6000611d0382611c98565b611d0d8185611ca3565b9350611d1d818560208601611cb4565b611d2681611ce7565b840191505092915050565b60006020820190508181036000830152611d4b8184611cf8565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d9082611ce7565b810181811067ffffffffffffffff82111715611daf57611dae611d58565b5b80604052505050565b6000611dc2611a9e565b9050611dce8282611d87565b919050565b600067ffffffffffffffff821115611dee57611ded611d58565b5b602082029050602081019050919050565b600080fd5b6000611e17611e1284611dd3565b611db8565b90508083825260208201905060208402830185811115611e3a57611e39611dff565b5b835b81811015611e635780611e4f8882611b31565b845260208401935050602081019050611e3c565b5050509392505050565b600082601f830112611e8257611e81611d53565b5b8135611e92848260208601611e04565b91505092915050565b600080fd5b600067ffffffffffffffff821115611ebb57611eba611d58565b5b611ec482611ce7565b9050602081019050919050565b82818337600083830152505050565b6000611ef3611eee84611ea0565b611db8565b905082815260208101848484011115611f0f57611f0e611e9b565b5b611f1a848285611ed1565b509392505050565b600082601f830112611f3757611f36611d53565b5b8135611f47848260208601611ee0565b91505092915050565b600080600080600060a08688031215611f6c57611f6b611aa8565b5b6000611f7a88828901611afb565b9550506020611f8b88828901611afb565b945050604086013567ffffffffffffffff811115611fac57611fab611aad565b5b611fb888828901611e6d565b935050606086013567ffffffffffffffff811115611fd957611fd8611aad565b5b611fe588828901611e6d565b925050608086013567ffffffffffffffff81111561200657612005611aad565b5b61201288828901611f22565b9150509295509295909350565b600067ffffffffffffffff82111561203a57612039611d58565b5b602082029050602081019050919050565b600061205e6120598461201f565b611db8565b9050808382526020820190506020840283018581111561208157612080611dff565b5b835b818110156120aa57806120968882611afb565b845260208401935050602081019050612083565b5050509392505050565b600082601f8301126120c9576120c8611d53565b5b81356120d984826020860161204b565b91505092915050565b600080604083850312156120f9576120f8611aa8565b5b600083013567ffffffffffffffff81111561211757612116611aad565b5b612123858286016120b4565b925050602083013567ffffffffffffffff81111561214457612143611aad565b5b61215085828601611e6d565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61218f81611b10565b82525050565b60006121a18383612186565b60208301905092915050565b6000602082019050919050565b60006121c58261215a565b6121cf8185612165565b93506121da83612176565b8060005b8381101561220b5781516121f28882612195565b97506121fd836121ad565b9250506001810190506121de565b5085935050505092915050565b6000602082019050818103600083015261223281846121ba565b905092915050565b61224381611c35565b811461224e57600080fd5b50565b6000813590506122608161223a565b92915050565b6000806040838503121561227d5761227c611aa8565b5b600061228b85828601611afb565b925050602061229c85828601612251565b9150509250929050565b600080604083850312156122bd576122bc611aa8565b5b60006122cb85828601611afb565b92505060206122dc85828601611afb565b9150509250929050565b600080600080600060a0868803121561230257612301611aa8565b5b600061231088828901611afb565b955050602061232188828901611afb565b945050604061233288828901611b31565b935050606061234388828901611b31565b925050608086013567ffffffffffffffff81111561236457612363611aad565b5b61237088828901611f22565b9150509295509295909350565b60006020828403121561239357612392611aa8565b5b60006123a184828501611afb565b91505092915050565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b6000612406602a83611ca3565b9150612411826123aa565b604082019050919050565b60006020820190508181036000830152612435816123f9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061248357607f821691505b602082108114156124975761249661243c565b5b50919050565b7f596f752063616e2774206d696e74206e6f206d6f726500000000000000000000600082015250565b60006124d3601683611ca3565b91506124de8261249d565b602082019050919050565b60006020820190508181036000830152612502816124c6565b9050919050565b7f546865726520617265206e6f6e6520617661696c61626c6520666f72206d696e60008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b6000612565602183611ca3565b915061257082612509565b604082019050919050565b6000602082019050818103600083015261259481612558565b9050919050565b7f53656e64206d6f7265206d6f6e6579206d616e00000000000000000000000000600082015250565b60006125d1601383611ca3565b91506125dc8261259b565b602082019050919050565b60006020820190508181036000830152612600816125c4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061264182611b10565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561267457612673612607565b5b600182019050919050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206e6f7220617070726f7665640000000000000000000000000000000000602082015250565b60006126db602f83611ca3565b91506126e68261267f565b604082019050919050565b6000602082019050818103600083015261270a816126ce565b9050919050565b600081905092915050565b50565b600061272c600083612711565b91506127378261271c565b600082019050919050565b600061274d8261271f565b9150819050919050565b7f4661696c656420746f2073656e64206574686572000000000000000000000000600082015250565b600061278d601483611ca3565b915061279882612757565b602082019050919050565b600060208201905081810360008301526127bc81612780565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b600061281f602983611ca3565b915061282a826127c3565b604082019050919050565b6000602082019050818103600083015261284e81612812565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006128e0602183611ca3565b91506128eb82612884565b604082019050919050565b6000602082019050818103600083015261290f816128d3565b9050919050565b600061292182611b10565b915061292c83611b10565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561296157612960612607565b5b828201905092915050565b60006040820190506129816000830185611b86565b61298e6020830184611b86565b9392505050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b60006129f1602883611ca3565b91506129fc82612995565b604082019050919050565b60006020820190508181036000830152612a20816129e4565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612a83602583611ca3565b9150612a8e82612a27565b604082019050919050565b60006020820190508181036000830152612ab281612a76565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000612b15602a83611ca3565b9150612b2082612ab9565b604082019050919050565b60006020820190508181036000830152612b4481612b08565b9050919050565b60006040820190508181036000830152612b6581856121ba565b90508181036020830152612b7981846121ba565b90509392505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000612bde602983611ca3565b9150612be982612b82565b604082019050919050565b60006020820190508181036000830152612c0d81612bd1565b9050919050565b612c1d81611ad2565b82525050565b600081519050919050565b600082825260208201905092915050565b6000612c4a82612c23565b612c548185612c2e565b9350612c64818560208601611cb4565b612c6d81611ce7565b840191505092915050565b600060a082019050612c8d6000830188612c14565b612c9a6020830187612c14565b612ca76040830186611b86565b612cb46060830185611b86565b8181036080830152612cc68184612c3f565b90509695505050505050565b600081519050612ce181611bdc565b92915050565b600060208284031215612cfd57612cfc611aa8565b5b6000612d0b84828501612cd2565b91505092915050565b60008160e01c9050919050565b600060033d1115612d405760046000803e612d3d600051612d14565b90505b90565b600060443d1015612d5357612dd6565b612d5b611a9e565b60043d036004823e80513d602482011167ffffffffffffffff82111715612d83575050612dd6565b808201805167ffffffffffffffff811115612da15750505050612dd6565b80602083010160043d038501811115612dbe575050505050612dd6565b612dcd82602001850186611d87565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000612e35603483611ca3565b9150612e4082612dd9565b604082019050919050565b60006020820190508181036000830152612e6481612e28565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000612ec7602883611ca3565b9150612ed282612e6b565b604082019050919050565b60006020820190508181036000830152612ef681612eba565b9050919050565b600060a082019050612f126000830188612c14565b612f1f6020830187612c14565b8181036040830152612f3181866121ba565b90508181036060830152612f4581856121ba565b90508181036080830152612f598184612c3f565b9050969550505050505056fe697066733a2f2f516d5947423131523432656734394d677473395448506d597175347143536172685a4b6a446972416e596e4d53382f6d657461646174612e6a736f6ea2646970667358221220ee4ae137e1f35a7e47fb218b5cf2e0aa5e62a76b9e345ec4e2fdb2c2d6e801b564736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/Meta.sol:meta",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 31,
        "contract": "contracts/Meta.sol:meta",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 33,
        "contract": "contracts/Meta.sol:meta",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1778,
        "contract": "contracts/Meta.sol:meta",
        "label": "tokenIds",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}